package com.shinobigroup.configuration;

import static org.junit.Assert.*;
import org.junit.*;

import java.util.Properties;
import java.util.function.Consumer;
import java.beans.*;

public class PropertiesNotifierTest {

	static final String PROPERTY = "test.property";
	static final String VALUE    = "test.value";
	
	static final String OTHER_PROPERTY = "other.property";
	static final String OTHER_VALUE    = "other.value";
	
	Properties properties;
	PropertiesNotifier notifier;
	
	@Before
	public void setup() {
		properties = new Properties();
		notifier = new PropertiesNotifier(properties);		
	}
	
	@Test
	public void notifiesWhenAnyPropertyChanges() {
		boolean[] result = new boolean[]{false};
		notifier.addPropertyChangeListener(event -> { result[0] = true; } );
		
		notifier.setProperty(OTHER_PROPERTY, OTHER_VALUE);
		assertTrue( result[0] );
		
		result[0] = false;
		
		notifier.setProperty(PROPERTY, VALUE);
		assertTrue( result[0] );
	}
	
	@Test
	public void notifiesOnlyWhenSpecificPropertyChanges() {
		boolean[] result = new boolean[]{false};
		notifier.addPropertyChangeListener(PROPERTY, event -> { result[0] = true; } );
		
		notifier.setProperty(OTHER_PROPERTY, OTHER_VALUE);
		assertFalse( result[0] );
		
		notifier.setProperty(PROPERTY, VALUE);
		assertTrue( result[0] );
	}
	
	@Test
	public void stopsNotifyingListenersOfAllProperties() {
		boolean[] result = new boolean[]{false};
		Consumer<PropertyChangeEvent> catcher = event -> { result[0] = true; }; 
		notifier.addPropertyChangeListener(catcher);
		notifier.setProperty(PROPERTY, VALUE);
		assertTrue( result[0] );		
	}

	@Test
	public void stopsNotifyingListenersOfSpecificProperties() {
		
	}
}
